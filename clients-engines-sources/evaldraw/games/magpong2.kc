enum {MAXDEVS=4}
static pp[12], op[MAXDEVS][12], np[MAXDEVS][12];
static junk[3], obut[MAXDEVS], but[MAXDEVS], score[2];

enum {MAXBALLS=64}
static balx[MAXBALLS], baly[MAXBALLS], balr[MAXBALLS];
static balxv[MAXBALLS], balyv[MAXBALLS], balown[MAXBALLS], balblow[MAXBALLS], baln;

enum {SOLN=6}
static solx0[SOLN], soly0[SOLN], solx1[SOLN], soly1[SOLN], solr[SOLN], solc[SOLN];

static hang, hang2, padhleng[2];
static tim, starttim = 1e32, gameovertim = 1e32;

static playcol[MAXDEVS] = {0xff4040,0x40ff40,0xff8080,0x80ff80};
   
()
{     //Ken's record: 1734.73
   tim = klock();
   b = 0;
   nextshot = tim+2.5+rnd; nextshot2 = 0;
   hang = -.30; hang2 = +.30; score[0] = 0; score[1] = 0; baln = 0;
   setcam(0,0,0,0,0);
   while (1)
   {
      devnum = max(USING6DOF,1);
      if ((bstatus) && (USING6DOF == 1) && (devnum < 2)) //Hack to allow 3D vs. 2D mouse (click LMB on 2D mouse)
      {
         bstatus = 0; devnum = 2; score[0] = 0; score[1] = 0; baln = 0;
      }
      
      solx0[0] = xres*0.00; soly0[0] = yres*0.5; solx1[0] = xres*0.10; soly1[0] = yres; solr[0] = xres*.005; solc[0] = 0x804040;
      solx0[1] = xres*0.485;soly0[1] = yres*0.5; solx1[1] = xres*0.40; soly1[1] = yres; solr[1] = xres*.005; solc[1] = 0x804040;
      solx0[2] = xres*0.515;soly0[2] = yres*0.5; solx1[2] = xres*0.60; soly1[2] = yres; solr[2] = xres*.005; solc[2] = 0x408040;
      solx0[3] = xres*1.00; soly0[3] = yres*0.5; solx1[3] = xres*0.90; soly1[3] = yres; solr[3] = xres*.005; solc[3] = 0x408040;
      prad = xres*.005; padhleng[0] = xres/24; padhleng[1] = xres/24;
   
      otim = tim; do { tim = klock(); dtim = tim-otim; } while (dtim < 1/60);
      hx = xres/2; hy = yres/2; hz = hx/2;
          
      for(dev=0;dev<USING6DOF;dev++)
      {
         for(i=0;i<12;i++) op[dev][i] = np[dev][i];
         readmag6d(dev,pp[0],pp[3],pp[6],pp[9],junk,&b);
         obut[dev] = but[dev]; but[dev] = (b!=0);
         f = .5;
         for(i=0;i<12;i++) np[dev][i] += (pp[i]-np[dev][i])*f;
      }
      if (USING6DOF < 2)
      {
         if (USING6DOF == 0)
         {
            for(i=0;i<12;i++) op[0][i] = np[0][i];
            f = .5;
            np[0] += ((mousx-hx)/hz-np[0])*f;
            np[1] += ((mousy-hy)/hz-np[1])*f;
            np[2] = 1;
            hang += (keystatus[0xcd]-keystatus[0xcb])*dtim*-4;
            np[3] = cos(hang); np[ 4] =-sin(hang); np[ 5] = 0;
            np[6] = sin(hang); np[ 7] = cos(hang); np[ 8] = 0;
            np[9] =         0; np[10] =         0; np[11] = 1;
            obut[0] = but[0]; but[0] = bstatus;
         }
         else
         {
            for(i=0;i<12;i++) op[1][i] = np[1][i];
            f = .5;
            np[1][0] += ((mousx-hx)/hz-np[1][0])*f;
            np[1][1] += ((mousy-hy)/hz-np[1][1])*f;
            np[1][2] = 1;
            hang2 += (keystatus[0xcd]-keystatus[0xcb])*dtim*-4;
            np[1][3] = cos(hang2); np[1][ 4] =-sin(hang2); np[1][ 5] = 0;
            np[1][6] = sin(hang2); np[1][ 7] = cos(hang2); np[1][ 8] = 0;
            np[1][9] =          0; np[1][10] =          0; np[1][11] = 1;
            obut[1] = but[1]; but[1] = bstatus;
         }
         
         if ((tim > nextshot) && (gameovertim >= 1e30) && (devnum < 2))
         {
            but[0] = 1;
            if (nextshot2)
            {
               nextshot = tim+rnd*.2;
               nextshot2--;
            }
            else
            {
               if (tim-starttim >= 30) nextshot2 = 1;
               if (tim-starttim >= 60) nextshot2 = int((tim-starttim)/60)+1;
               do
               {
                  nextshot = tim+1.0+sqrt(max(nextshot2,1))+rnd;
               } while ((nextshot < 5) && (nextshot-floor(nextshot) >= 1-.2*nextshot2));
            }
         }
         if ((bstatus>1) && (gameovertim <= 1e30)) { bstatus = 0; return; }
      }
      else
      {
         if ((bstatus%2) > (but[0]%2)) but[0] = 1;
         if ((bstatus>1) > (but[1]%2)) but[1] = 1;
      }
      
      for(dev=0;dev<devnum;dev++)
      {
         if (((but[dev]%2) > (obut[dev]%2)) && (baln < MAXBALLS))
         {
            if (starttim >= 1e30) starttim = tim;
            t = min(max(tim%1,.03),.97);
            x0 = (t*.30+.10)*xres; y0 = yres;
            x1 = (t*.32+.09)*xres; y1 = yres*.96;
            if (dev%2) { x0 = xres-x0; x1 = xres-x1; }
            balx[baln] = x1;
            baly[baln] = y1;
            v = (nrnd*64-1024)*.02;
            balxv[baln] = (x0-x1)*v;
            balyv[baln] = (y0-y1)*v;
            balr[baln] = xres*.006;
            balown[baln] = (balx[baln]>xres/2);
            balblow[baln] = 1e32;
            if (0) //For debugging scoring
            {
               balx[baln] = mousx;
               baly[baln] = mousy+50;
               balxv[baln] = 0;
               balyv[baln] = 0;
               balown[baln] = 0;
            }
            baln++;
            playsound("shoot.wav");
         }
      }
      
      c = cos(tim/2); s = sin(tim/2);
      solx0[4] = c*xres*-.05+xres*.35; soly0[4] = s*xres*-.05+yres*0.15;
      solx1[4] = c*xres*+.05+xres*.35; soly1[4] = s*xres*+.05+yres*0.15;
      solr[4] = xres*.005; solc[4] = 0x607080;
      solx0[5] = c*xres*+.05+xres*.65; soly0[5] = s*xres*-.05+yres*0.15;
      solx1[5] = c*xres*-.05+xres*.65; soly1[5] = s*xres*+.05+yres*0.15;
      solr[5] = xres*.005; solc[5] = 0x607080;

      dt = 1/32;
      for(t=0;t<1;t+=dt)
      {
         for(dev=0;dev<devnum;dev++)
         {         
            for(i=0;i<12;i++) pp[i] = (np[dev][i]-op[dev][i])*t + op[dev][i];
            
            f = -pp[2]/pp[11];
            sx = (pp[0] + pp[ 9]*f)*hz + hx;
            sy = (pp[1] + pp[10]*f)*hz + hy;
            if (USING6DOF >= 2)
            {
               if ((dev%2) == 0) sx = min(sx,xres/2);
               if ((dev%2) == 1) sx = max(sx,xres/2);
            }
            g = padhleng[dev]/sqrt(pp[3]^2+pp[4]^2);
            x0 = sx-pp[3]*g; y0 = sy-pp[4]*g;
            x1 = sx+pp[3]*g; y1 = sy+pp[4]*g;
      
            cx = 0; cy = 0; frac = 0;
            if (numframes)
            for(i=0;i<baln;i++)
            {
               if (tim >= balblow[i]) continue;
               d = sqrt(ptlinedist2(balx[i],baly[i],x0,y0,x1,y1,&cx,&cy,&frac));
               if (d >= prad+balr[i]) continue;

                  //Estimate paddle velocity
               f = -op[dev][2]/op[dev][11];
               sx = (op[dev][0] + op[dev][ 9]*f)*hz + hx;
               sy = (op[dev][1] + op[dev][10]*f)*hz + hy;
               if (USING6DOF >= 2)
               {
                  if ((dev%2) == 0) sx = min(sx,xres/2);
                  if ((dev%2) == 1) sx = max(sx,xres/2);
               }
               g = padhleng[dev]/sqrt(op[dev][3]^2+op[dev][4]^2);
               sx0 = sx+op[dev][3]*g*(frac*2-1);
               sy0 = sy+op[dev][4]*g*(frac*2-1);
               f = -np[dev][2]/np[dev][11];
               sx = (np[dev][0] + np[dev][ 9]*f)*hz + hx;
               sy = (np[dev][1] + np[dev][10]*f)*hz + hy;
               if (USING6DOF >= 2)
               {
                  if ((dev%2) == 0) sx = min(sx,xres/2);
                  if ((dev%2) == 1) sx = max(sx,xres/2);
               }
               g = padhleng[dev]/sqrt(np[dev][3]^2+np[dev][4]^2);
               sx1 = sx+np[dev][3]*g*(frac*2-1);
               sy1 = sy+np[dev][4]*g*(frac*2-1);
               f = 1/dtim;
               pvx = (sx1-sx0)*f;
               pvy = (sy1-sy0)*f;
               
               dx = balx[i]-cx; dy = baly[i]-cy;
               f = 1/sqrt(dx^2+dy^2); dx *= f; dy *= f;
               
               coefrefl = 1.00;
               f = ((balxv[i]-pvx)*dx + (balyv[i]-pvy)*dy)*-coefrefl;
               if (f < 0) continue;
               playsound("ppbaltab.wav",f/25);
               balxv[i] += dx*f;
               balyv[i] += dy*f;
               
               f = prad+balr[i]-d;
               balx[i] += dx*f;
               baly[i] += dy*f;
               
               balown[i] = dev%2;
            }
         }
         
         ballmove(dtim*dt);
      }
//------------------------------------------------------------------------
      gldisable(GL_DEPTH_TEST);
      glbegin(GL_QUADS); glsettex("cloud.png");
      setcol(0x304050); t = (tim*-.02)%1;
      gltexcoord(0,t  ); glvertex(-6000,-6000,1000);
      gltexcoord(4,t  ); glvertex(+6000,-6000,1000);
      gltexcoord(4,t+4); glvertex(+6000,+6000,1000);
      gltexcoord(0,t+4); glvertex(-6000,+6000,1000);
   
      r = xres/256;
      for(t=(tim*.02)%(1/32);t<=1;t+=1/32)
      {
         setcol(0x804040); drawcone(     (t*.30+.10)*xres,yres,r,     (t*.32+.09)*xres,yres*.96,0);
         setcol(0x408040); drawcone(xres-(t*.30+.10)*xres,yres,r,xres-(t*.32+.09)*xres,yres*.96,0);
      }
      t = tim%1;
      setcol(0x804040); drawcone(     (t*.30+.10)*xres,yres,r,     (t*.32+.09)*xres,yres*.96,0);
      setcol(0x40c040); drawcone(xres-(t*.30+.10)*xres,yres,r,xres-(t*.32+.09)*xres,yres*.96,0);
            
      for(i=0;i<baln;i++)
      {
         if (balown[i] < 0) { r = 0x60; g = 0x70; b = 0x90; }
                       else { r = (balown[i]==0)*255; g = (balown[i]==1)*192; b = (balown[i]==2)*192; }
         setcol(r,g,b);
         if (tim >= balblow[i])
         {
            //drawsph(balx[i]-hx,baly[i]-hy,hx,balr[i]*(1-(tim-balblow[i]))^2);
            f = sqrt(tim-balblow[i])*xres*.001;
            rad = cos((tim-balblow[i])*PI*.5)*xres*.001;
            a = 0;
            for(j=128;j>=0;j--,a+=(PI*2*((sqrt(5.0)+1.0)/2.0)))
            {
               fx = cos(a)*j*f + balx[i];
               fy = sin(a)*j*f + baly[i];
               drawsph(fx,fy,rad);
            }
            continue;
         }
         drawsph(balx[i]-hx,baly[i]-hy,hx,balr[i]);
         setcol(r+ 64,g+ 64,b+ 64); drawsph(balx[i]-balr[i]*.4,baly[i]-balr[i]*.4,balr[i]*.3);
         setcol(r+128,g+128,b+128); drawsph(balx[i]-balr[i]*.4,baly[i]-balr[i]*.4,balr[i]*.2);
         setcol(0xffffff);          drawsph(balx[i]-balr[i]*.4,baly[i]-balr[i]*.4,balr[i]*.1);
      }
      for(i=0;i<SOLN;i++)
      {
         setcol(solc[i]); drawcone(solx0[i],soly0[i],solr[i],solx1[i],soly1[i],solr[i]);
      }

      for(dev=0;dev<devnum;dev++)
      {
            //pp[0] + pp[ 9]*f = x
            //pp[1] + pp[10]*f = y
            //pp[2] + pp[11]*f = 0
         f = -np[dev][2]/np[dev][11];
         sx = (np[dev][0] + np[dev][ 9]*f)*hz + hx;
         sy = (np[dev][1] + np[dev][10]*f)*hz + hy;
         if ((USING6DOF >= 2) || (devnum >= 2))
         {
            if ((dev%2) == 0) sx = min(sx,xres/2);
            if ((dev%2) == 1) sx = max(sx,xres/2);
         }
  
         f = padhleng[dev]; g = f/sqrt(np[dev][3]^2+ np[dev][4]^2);
         setcol(playcol[dev]);
         x0 = sx-np[dev][3]*g; y0 = sy-np[dev][4]*g;
         x1 = sx+np[dev][3]*g; y1 = sy+np[dev][4]*g;
         drawcone(x0,y0,prad,x1,y1,prad);
      }
      
      setfont(xres*.02,yres*.05,1);
      if (USING6DOF)
      {
         setcol(0xc04040); moveto(xres*(.455-(int(log(max(score[0],1),10))+1)*.01),yres*.95); printf("%g",score[0]);
         setcol(0x40c040); moveto(xres*(.545-(int(log(max(score[1],1),10))+1)*.01),yres*.95); printf("%g",score[1]);
      }
      else
      {
         if (gameovertim <= 1e30) { t = gameovertim; }
         else
         {
            setcol(0xc04040); moveto(xres*(.50-(int(log(max(score[0],1),10))+1)*.01),yres*.95); printf("%g",score[0]);
            t = max(tim-starttim,0);
         }
         setcol(0x8080ff); moveto(xres*(.50-(int(log(max(t,1),10))+4)*.01),yres*.85); printf("%.2f",t);
      }
      
      if ((USING6DOF == 0) && (gameovertim <= 1e30))
      {
         setcol(0xc04040);
         siz = min(tim-gameovertim-starttim,1);
         setfont(xres*.07*siz,yres*.2*siz,1);
         moveto(xres*(.50-.07*siz*.5*9),yres*(.5-.2*.5*siz)); printf("GAME OVER");
      }
      
      if (tim < 3)
      {
         t = min(3.5-tim,1);
         setfont(xres*.03*t,yres*.07*t,1);
         setcol(0xa0*t,0x80*t,0xb0*t);
         moveto(xres*(.5-.4*t),yres*.28); printf("Hit balls into other bucket");
         if (USING6DOF == 0) { moveto(xres*(.5-.4*t),yres*.35); printf("Use arrows to rotate paddle"); }
      }
      
      refresh();
   }
}

ballmove (dtim)
{
   cx = 0; cy = 0; frac = 0;
   for(i=baln-1;i>=0;i--)
   {
      if (tim >= balblow[i])
      {
         baly[i] += balyv[i]*dtim;
         balyv[i] += dtim*xres*0.2; //gravity
         if (tim >= balblow[i]+1)
         {
            baln--;
            balx[i]    = balx[baln];
            baly[i]    = baly[baln];
            balxv[i]   = balxv[baln];
            balyv[i]   = balyv[baln];
            balr[i]    = balr[baln];
            balown[i]  = balown[baln];
            balblow[i] = balblow[baln];
         }
         continue;
      }   
      balxv[i] *= pow(0.70,dtim);
      balyv[i] *= pow(0.70,dtim);
      balx[i] += balxv[i]*dtim;
      baly[i] += balyv[i]*dtim;
      balyv[i] += dtim*xres*0.7; //gravity
      for(j=baln-1;j>=0;j--)
      {
         if ((i == j) || (balblow[j] <= tim)) continue;

         d = sqrt((balx[i]-balx[j])^2+(baly[i]-baly[j])^2);
         if (d >= balr[i]+balr[j]) continue;

         dx = balx[i]-balx[j]; dy = baly[i]-baly[j];
         f = 1/sqrt(dx^2+dy^2); dx *= f; dy *= f;

         balown[i] = -1; balown[j] = -1;
         
         coefrefl = 1.35;
         f = ((balxv[i]-balxv[j])*dx + (balyv[i]-balyv[j])*dy)*-coefrefl;
         if (f < 0) continue;
         playsound("ppbaltab.wav",f/12,1);
         f *= .5;
         balxv[i] += dx*f; balxv[j] -= dx*f;
         balyv[i] += dy*f; balyv[j] -= dy*f;
         
         f = (balr[i]+balr[j]-d)*.50001;
         balx[i] += dx*f; balx[j] -= dx*f;
         baly[i] += dy*f; baly[j] -= dy*f;
      }
      for(j=0;j<SOLN;j++)
      {
         d = sqrt(ptlinedist2(balx[i],baly[i],solx0[j],soly0[j],solx1[j],soly1[j],&cx,&cy,&frac));
         if (d >= solr[j]+balr[i]) continue;

         dx = balx[i]-cx; dy = baly[i]-cy;
         f = 1/sqrt(dx^2+dy^2); dx *= f; dy *= f;
         
         pvx = 0; pvy = 0; //Velocity of wall at contact

         coefrefl = 1.35;
         f = ((balxv[i]-pvx)*dx + (balyv[i]-pvy)*dy)*-coefrefl;
         if (f < 0) continue;
         playsound("ppbaltab.wav",f/12,2);
         balxv[i] += dx*f;
         balyv[i] += dy*f;
         
         f = solr[j]+balr[i]-d;
         balx[i] += dx*f;
         baly[i] += dy*f;
         
         //if (j >= 4) balown[i] = -1;
      }
      if (baly[i]+balr[i] > yres*1.01)
      {
         if ((USING6DOF) || (gameovertim >= 1e30))
         {
            osc = score[0];
            if (balown[i] >= 0)
            {
               if (abs(balx[i]-(1.5-balown[i])*xres/2) < xres*.15)
                  { score[balown[i]]++; playsound("pickup.wav"); }
               else
               {
                  if (USING6DOF == 0) { score[  balown[i]]--; playsound("ouch.wav"); }
                                 else { score[1-balown[i]]++; playsound("pickup.wav"); }
               }
            }
            else
            {
               if ((abs(balx[i]-xres/2) < xres/2) && (abs((balx[i]%(xres/2))-xres/4) <= xres*.15))
               {
                  if (balx[i] < xres/2) { score[1] += 2; if (USING6DOF == 0) score[0] -= 2; }
                                   else { score[0] += 2; }
                  if ((USING6DOF) || (balx[i] >= xres/2))
                  {
                     for(j=5;j>1;j--) playsound("pickup.wav",100,.6*1.3^j);
                  }
                  else
                  {
                     for(j=8;j>1;j--) playsound("ouch.wav",70,.8*1.1^j);
                  }
               }
            }
            if ((USING6DOF == 0) && (osc >= 0) && (score[0] < 0) && (gameovertim >= 1e30))
            {
               playtext("Game Over");
               gameovertim = tim-starttim;
            }
         }
         for(j=8;j>0;j--) playsound("ppbaltab.wav",50,.25+nrnd*.02); 
         balblow[i] = tim;
         balyv[i] = 0;
      }
   }
}

ptlinedist2 (x,y,x0,y0,x1,y1,&closx,&closy,&t)
{
   t = (x1-x0)^2 + (y1-y0)^2;
   if (t == 0) { closx = x0; closy = y0; }
   else
   {
      t = ((x-x0)*(x1-x0) + (y-y0)*(y1-y0))/t;
      t = min(max(t,0),1);
      closx = (x1-x0)*t + x0;
      closy = (y1-y0)*t + y0;
   }
   return((closx-x)^2 + (closy-y)^2);
}