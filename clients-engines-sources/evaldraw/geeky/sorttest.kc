enum {ALGOS=6, MODES=5, NMAX=65536, SC=1}
()
{
   static buf[NMAX], buf2[NMAX], sum[MODES][ALGOS], avg[MODES][ALGOS];
   setfont(6,8); n = (yres-20)*SC; maxtim = 1; bad = 0; bad2 = -1; mode = 0;
   sclock = klock(); sframe = numframes;
   while (1)
   {
      for(i=0;i<MODES;i++)
         if (keystatus[i+0x2])
         {
            mode = i;
            for(i=0;i<ALGOS;i++) { sum[mode][i] = 0; } sframe = numframes;
            break;
         }
      
      cls(0); setcol(0xffffff);
      if (bad)
      {
         setcol(0xa00000);
         moveto((bad2+1)*xres/(ALGOS+1),bad);
         lineto((bad2+2)*xres/(ALGOS+1),bad);
      }
      else
      {
         f = xres/(ALGOS+1);
         for(i=0;i<n;i++)
         {
            if (mode == 0) buf[i] = f*rnd;
            if (mode == 1) buf[i] = f*(0+rnd*rnd*rnd);
            if (mode == 2) { if (rnd < .99) buf[i] = f*(i+1)/n; else buf[i] = f*rnd; }
            if (mode == 3) buf[i] = f*(i+1)/n;
            if (mode == 4) buf[i] = f*(n-i)/n;
         }
      }
            
      xx = 0;
      for(i=0;i<n;i+=SC) { moveto(xx,i/SC); lineto(xx+buf[i],i/SC); }
      moveto(xx,n/2+1); printf("original data");
      
      csum = 0; for(i=0;i<n;i++) csum += buf[i];
         
      nmaxtim = 0;
      for(j=0;j<ALGOS;j++)
      {
         xx += xres/(ALGOS+1); for(i=0;i<n;i++) buf2[i] = buf[i];
                                                                         //Mem use:
         if (j == 0) { t0 = klock();    inssort(buf2,n); t1 = klock(); } //0
         if (j == 1) { t0 = klock();  shellsort(buf2,n); t1 = klock(); } //0
         if (j == 2) { t0 = klock();  mergesort(buf2,n); t1 = klock(); } //N+log(N)
         if (j == 3) { t0 = klock();  quicksort(buf2,n); t1 = klock(); } //log(N)
         if (j == 4) { t0 = klock();   heapsort(buf2,n); t1 = klock(); } //0
         if (j == 5) { t0 = klock(); bucketsort(buf2,n); t1 = klock(); } //N+BUX
                  
         if (bad2 == j) setcol(0xc08080); else setcol(0x80c080);
         sum[mode][j] += t1-t0;
         for(i=0;i<n;i+=SC) { moveto(xx,i/SC); lineto(xx+buf2[i],i/SC); }
         for(i=1;i<n;i++)
            if (buf2[i] < buf2[i-1]) { bad = i; bad2 = j; break; }
         nsum = 0; for(i=0;i<n;i++) nsum += buf2[i];
         if (fabs(csum-nsum) > 1e-8) { bad = 1; bad2 = j; }
         
         avg[mode][j] = sum[mode][j]*1000/(numframes-sframe+1);
         nmaxtim = max(nmaxtim,avg[mode][j]);
         setcol(0xc07070); moveto(xx,n/SC+1);
         nx = xx+xres*.5/(ALGOS+1); v = (avg[mode][j]/maxtim*xres/(ALGOS+1));
         drawcone(nx-v*.49,n+5,-4,nx+v*.49,n+5,-4);
         

         for(k=0;k<MODES;k++)
         {
            v = avg[k][j]*2^27/n^2;
            nx = xx+xres*.5/(ALGOS+1);
            drawcone(nx-v*.49,k*10+10,-4,
                     nx+v*.49,k*10+10,-4);
         }
                  
         setcol(0xffffff); moveto(nx-10*7,n/sc+10);
         if (j == 0) printf("   ins");
         if (j == 1) printf(" shell");
         if (j == 2) printf(" merge");
         if (j == 3) printf(" quick");
         if (j == 4) printf("  heap");
         if (j == 5) printf("bucket");
         printf("sort: %.3fms",avg[mode][j]);
      }
      maxtim = nmaxtim;
      
      refresh();
   }
}
//-----------------------------------------------------------------------
inssort (a[NMAX], n)
{
   for(j=1;j<n;j++)
      for(i=j;(i>0)&&(a[i]<a[i-1]);i--)
         { t = a[i]; a[i] = a[i-1]; a[i-1] = t; }
}
//-----------------------------------------------------------------------
shellsort (a[NMAX], n)
{
   enum {SHELLJMP=4} //4 best?
   for(gap=1;gap<n;gap=gap*SHELLJMP+1);
   for(gap=int(gap/SHELLJMP);gap>0;gap=int(gap/SHELLJMP))
      for(i=0;i<n-gap;i++)
         for(j=i;(j >= 0) && (a[j] > a[j+gap]);j-=gap)
            { t = a[j]; a[j] = a[j+gap]; a[j+gap] = t; }
}
//-----------------------------------------------------------------------
mergesortrec (a[NMAX], b[NMAX], a0, b1)
{
   a1 = int((a0+b1)/2); b0 = a1;
   if (a1-a0 > 1) mergesortrec(b,a,a0,a1);
   if (b1-b0 > 1) mergesortrec(b,a,b0,b1);
   for(i=a0;i<b1;i++)
   {
      if ((b0 >= b1) || ((a0 < a1) && (b[a0] < b[b0])))
           { a[i] = b[a0]; a0++; }
      else { a[i] = b[b0]; b0++; }
   }
}
mergesort (a[NMAX], n)
{
   static b[NMAX];
   for(i=0;i<n;i++) b[i] = a[i];
   mergesortrec(a,b,0,n);
}
//-----------------------------------------------------------------------
quicksort (a[NMAX], n)
{
   if (n <= 1) return;
   v0 = a[0]; v1 = a[1]; v2 = a[n-1]; //v = median of 3 elements
          i = min(v0,v1); if (v2 < i) v = i;
   else { i = v0+v1-i;    if (v2 > i) v = i;
   else                               v = v2; }

   j0 = 0; j1 = n;
   for(i=0;i<j1;i++)
   {
      if (a[i] > v) { j1--; t = a[j1]; a[j1] = a[i]; a[i] = t; i--; }
      else if (a[i] < v) { t = a[j0]; a[j0] = a[i]; a[i] = t; j0++; }
   }
   quicksort(&a[0],j0);
   quicksort(&a[j1],n-j1);
}
//-----------------------------------------------------------------------
heapsiftdown (a[NMAX], i, e)
{
   for(e=int((e+1)/2),k=a[i];i<e;a[i]=a[j],i=j)
   {
      j = i*2; j += (a[j+1] > a[j]); //j = argmax(a[j],a[j+1])
      if (a[j] <= k) break;
   }
   a[i] = k;
}
heapsort (a[NMAX], n)
{
   for(i=int((n-1)/2);i>=0;i--) heapsiftdown(a,i,n);
   for(i=n-1;i>0;i--)
      { t = a[0]; a[0] = a[i]; a[i] = t; heapsiftdown(a,0,i-1); }
}
//-----------------------------------------------------------------------
bucketsort (a[NMAX], n)
{
   enum {BUX=256};
   static nbux[BUX], a2[NMAX];

   vmin = a[0]; vmax = a[0];
   for(i=n-1;i>0;i--) { vmin = min(vmin,a[i]); vmax = max(vmax,a[i]); }
   f = (BUX-1e-6)/(vmax-vmin);
   
   for(b=BUX-1;b>=0;b--) { nbux[b] = 0; }
   for(i=n-1;i>=0;i--) { b = int((a[i]-vmin)*f); nbux[b]++; }
   i = 0; for(b=0;b<BUX;b++) { oi = i; i += nbux[b]; nbux[b] = oi; }
   for(i=n-1;i>=0;i--)
      { b = int((a[i]-vmin)*f); a2[nbux[b]++] = a[i]; }
   for(i=0;i<n;i++) { a[i] = a2[i]; }
   oi = 0; for(b=0;b<BUX;b++) { inssort(&a[oi],nbux[b]-oi); oi = nbux[b]; }
}
//-----------------------------------------------------------------------