() cls(0);
static px[3], py[3], obstatus, grab;
if (numframes == 0)
{
   px[0] = xres*.7; py[0] = yres*.5;
   px[1] = xres*.7; py[1] = yres*.3;
   px[2] = xres*.85; py[2] = yres*.25;
}

if (bstatus > obstatus)
{
   mind = 1e32;
   for(i=0;i<3;i++)
   {
      d = (px[i]-mousx)^2 + (py[i]-mousy)^2;
      if (d < mind) { mind = d; grab = i; }
   }
}
obstatus = bstatus;
if ((bstatus) && (grab >= 0))
   { px[grab] = mousx; py[grab] = mousy; }

dx1 = px[1]-px[0]; dy1 = py[1]-py[0];
dx2 = px[2]-px[0]; dy2 = py[2]-py[0];
setcol(0x603040);
moveto(px[0]+dx1    ,py[0]+dy1    );
lineto(px[0]+dx1+dx2,py[0]+dy1+dy2);
lineto(px[0]    +dx2,py[0]    +dy2);

lineto(px[0]-dy1+dx2,py[0]+dx1+dy2);
lineto(px[0]-dy1    ,py[0]+dx1    );
lineto(px[0]-dy1-dy2,py[0]+dx1+dx2);
lineto(px[0]    -dy2,py[0]    +dx2);
lineto(px[0]-dx1-dy2,py[0]-dy1+dx2);
lineto(px[0]-dx1    ,py[0]-dy1    );
lineto(px[0]-dx1-dx2,py[0]-dy1-dy2);
lineto(px[0]    -dx2,py[0]    -dy2);
lineto(px[0]+dy1-dx2,py[0]-dx1-dy2);
lineto(px[0]+dy1    ,py[0]-dx1    );
lineto(px[0]+dy1+dy2,py[0]-dx1-dx2);
lineto(px[0]    +dy2,py[0]    -dx2);
lineto(px[0]+dx1+dy2,py[0]+dy1-dx2);
lineto(px[0]+dx1    ,py[0]+dy1    );
for(i=1;i<=2;i++)
{
   moveto(px[0],py[0]);
   lineto(px[0]*2-px[i],py[0]*2-py[i]);
   moveto(px[0]+py[0]-py[i],py[0]+px[i]-px[0]);
   lineto(px[0]+py[i]-py[0],py[0]+px[0]-px[i]);
}


dotprod   = dx1*dx2 + dy1*dy2;
crossprod = dx1*dy2 - dy1*dx2;

setcol(0x4080a0);
for(i=1;i<=2;i++)
{
   if (i == 1)
   {
      f = dotprod/(dx1^2+dy1^2);
      x = px[0]+dx1*f;
      y = py[0]+dy1*f;
   }
   else
   {
      f = dotprod/(dx2^2+dy2^2);
      x = px[0]+dx2*f;
      y = py[0]+dy2*f;
   }
   for(j=0;j<64;j++) setpix(x+nrnd*1,y+nrnd*1);
   moveto(px[3-i],py[3-i]); lineto(x,y);
   lineto(px[i],py[i]);
   f = 10/sqrt((px[3-i]-x)^2+(py[3-i]-y)^2);
   g = f; if ((i == 2) != (dotprod < 0)) g = -g;
   moveto(x+(px[3-i]-x)*f,y+(py[3-i]-y)*f);
   lineto(x+(px[3-i]-x)*f-(py[3-i]-y)*g,
          y+(py[3-i]-y)*f+(px[3-i]-x)*g);
   lineto(x-(py[3-i]-y)*g,y+(px[3-i]-x)*g);
}

   //Draw arrows
for(i=1;i<=2;i++)
{
   setcol(0xc08080);
   dx = px[i]-px[0]; dy = py[i]-py[0];
   f = sqrt(dx^2+dy^2);
   if (f > 0) f = 8/f; else f = 1;
   for(j=-f;j<=f;j+=f)
   {
      moveto(px[i]-dx*f-dy*j,py[i]-dy*f+dx*j);
      lineto(px[i],py[i]);
   }
   lineto(px[0],py[0]);
   setcol(0x806060);
   moveto(px[i]+dx*f-3,py[i]+dy*f-4); printchar(i+64);
}

setcol(0xc0c0c0); setfont(7,12);
moveto((px[1]+px[2])/2-52,(py[1]+py[2])/2-12);
printf("|A X B| = %g",crossprod);

moveto((px[2]+px[0]+py[0]-py[1])/2,
       (py[2]+py[0]+px[1]-px[0])/2);
moveto(x-5,y-15); printchar('.');
moveto(x-20,y-12); printf("A   B = %g",dotprod);