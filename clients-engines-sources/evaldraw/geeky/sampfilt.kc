enum {NCOEFS=4} //Even numbers work best
enum {NSAMPS=NCOEFS*256,YSC=127};
static normmode = 0;

()
{
	while (1)
	{
		if (keystatus[0x39]) { keystatus[0x39] = 0; normmode = !normmode; }
		cls(0);
		
			//Draw grid
		setcol(0x808080);
		for(i=NCOEFS%2;i<NCOEFS*2;i+=2)
			{ sx = i*xres*.5/NCOEFS; drawcone(sx,0,.5,sx,yres,.5); }
		for(i=1;i>=0;i--)
			{ sy = (i*-.6+.8)*yres; drawcone(0,sy,.5,xres,sy,.5); }
		
			//Draw graph
		setcol(0xffffff); moveto(-1,0);
		for(sx=0;sx<xres;sx++)
			lineto(sx,(getfilt((sx/xres-.5)*NCOEFS)*-.6+.8)*yres);
			
			//Draw points
		setfont(8,12); setcol(0xffc0ff); fx = ((mousx/xres-.5)*NCOEFS)%1;
		for(i=0;i<NCOEFS;i++)
		{
			x = (i+(fx+(NCOEFS%2)*.5)%1)-NCOEFS/2; y = getfilt(x);
			drawsph((x/NCOEFS+.5)*xres,(y*-.6+.8)*yres,4);
			moveto((x/NCOEFS+.5)*xres-40,(y*-.6+.8)*yres-16);
			printf("%+f",y);
		}
		
		if (normmode) { moveto(0,yres-16); printf("Normalize"); }
		
		if (bstatus) moveto(0,0); else moveto(0,yres); //RMB
		fprintf("static const signed int coef[%g*%g] =\n{",NCOEFS,NSAMPS/NCOEFS);
		for(i=0;i<NSAMPS;i++)
		{
			if (!(i%16)) fprintf("\n\t");
			fprintf("%+4g,",near(getfilt(((i+.5-NSAMPS/2)*NCOEFS)/NSAMPS)*YSC));
		}
		fprintf("\n};");
		refresh();
	}
}

getfilt (x)
{
	if (x == 0) return(1);
	xp = x*PI; y = (sin(xp)/xp) * (cos(xp*2/NCOEFS)*.5+.5);
	if (normmode) //normalize sum of coefs to always be 1.0
	{
		xx = ((x+(NCOEFS%2)*.5)%1)-NCOEFS/2; ytot = 0;
		for(i=0;i<NCOEFS;i++)
		{
			xp = (xx+i)*PI; if (xp == 0) { ytot += 1; continue; }
			ytot += (sin(xp)/xp) * (cos(xp*2/NCOEFS)*.5+.5);   
		}
		y /= ytot;
	}
	return(y);
}
